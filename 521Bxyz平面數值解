import numpy as np
import numpy.linalg as lg

def pde_poisson(f,g,BFx,Domain,Mx,My,tol,MaxIter):
    """
    The PDE solver of u_xx + u_yy + g(x,y)u = f(x,y) over the region
    D = [x0,xf]x[y0,yf] with the boundary conditions:
    u(x0,y) = bx0(y), u(xf,y) = bxf(y)
    u(x,y0) = by0(x), u(x,yf) = byf(x)
    Mx : the number of subintervals along x axis
    My : the number of subintervals along y axis
 
    tol : the tolerance
    MaxIter : the Maximal number of the iteration
     
    The output
    u : u(x_j,y_i)
    x : the uniform grids of x-axis
    y : the uniform grids of y-axis 
    """
 
    bx0, bxf, by0, byf = BFx[0], BFx[1], BFx[2], BFx[3]
    x0, xf, y0, yf = Domain[0], Domain[1], Domain[2], Domain[3]
     
    hx = float(xf-x0)/Mx
    hy = float(yf-y0)/My
 
    x = [x0+j*hx for j in range(1,Mx)]
    y = [y0+i*hy for i in range(1,My)]
 
    Mx, My = Mx+1, My+1
 
    u = np.zeros([My,Mx])
    F = np.zeros([My,Mx])
    G = np.zeros([My,Mx])
    u0 = np.zeros([My,Mx])
    ux = np.zeros([My,Mx])
    uy = np.zeros([My,Mx])

    #set boundary condition
    j = 1
    for xj in x:
        u[0,j], u[My-1,j] = by0(xj), byf(xj)
        j+=1
    i = 1
    for yi in y:
        u[i,0], u[i,Mx-1] = bx0(yi), bxf(yi)
        i+=1
 
    #initialize as the average of boundary values
    sum_of_bv = sum(u[0,:])+sum(u[My-1,:])+sum(u[1:My-1,0])+sum(u[1:My-1,Mx-1])
 
    u[1:My-1,1:Mx-1] = float(sum_of_bv)/(2*(Mx+My-2))
 
    #set the f(xj,yi) & g(xj,yi)
    for i in range(1,My-1):
        for j in range(1,Mx-1):
            F[i,j], G[i,j] = f(x[j-1],y[i-1]), g(x[j-1],y[i-1])
 
    dx2, dy2 = hx**2, hy**2
    dxy2 = 2*(dx2+dy2)
    rx, ry = dx2/dxy2, dy2/dxy2
    rxy = rx*dy2
    for itr in range(MaxIter):
        for i in range(1,My-1):
            for j in range(1,Mx-1):
                u[i,j] = ry*(u[i,j+1]+u[i,j-1])+rx*(u[i+1,j]+u[i-1,j])+rxy*(G[i,j]*u[i,j]-F[i,j])
        Err = abs(u-u0)
         
        if (itr>1) & (Err.max()<tol):
            break
        u0=u

    
    for i in range(Mx-1):
        for j in range(My-1): 
            ux[i,j] = (u[i,j+1]-u[i,j])/hx
            uy[i,j] = (u[i+1,j]-u[i,j])/hy

    u = u[1:My-1,1:Mx-1]
    ux = ux[1:My-1,1:Mx-1]
    uy = uy[1:My-1,1:Mx-1]
    return u, x, y,ux,uy


import math
C=3*10**8
fq=10**11
w=2*math.pi*fq
a = 10*10**-2
b = 5*10**-2
theta=45
k=[(w/C)*math.cos(math.pi*(theta/180)),0,(w/C)*math.sin(math.pi*(theta/180))]
number=20
m=1
n=0
B0=1

kz=(w*w/C/C-(math.pi*math.pi*(m*m/a/a+n*n/b/b)))**(1/2)
g=w*w/C/C-kz*kz


BF=[lambda x:B0*np.cos(m*math.pi*x/a)*np.cos(n*math.pi*0/b)
, lambda x:B0*np.cos(m*math.pi*x/a)*np.cos(n*math.pi*b/b)
,lambda y:B0*np.cos(m*math.pi*0/a)*np.cos(n*math.pi*y/b)
,lambda y:B0*np.cos(m*math.pi*a/a)*np.cos(n*math.pi*y/b)]
Domain = [0,a,0,b]
u,x,y,ux,uy = pde_poisson(lambda x,y:0.0, lambda x,y:g, BF,Domain,number+1,number+1,10**(-8),50)
print u.shape,len(x),len(y)
#print u
#u,x,y = pde_poisson(lambda x,y:0.0, lambda x,y:0.0, BF,Domain,number,number,10**(-8),5)
#print u.shape,len(x),len(y)
#print u[1:10,0]



#print type(number)



print (ux.shape)
print (uy.shape)
#print ux
#print uy
